#############################################
###This script manipulates the sqlite db generated by
###to format for entry into the gender contribution database.
###After CSV is written, data must be formatted into a
###SQL insert statement and the query contained in
###sql_script.txt is used to generate the correct CSVs to
###add to R working files.
#############################################

import csv
import sqlite3
conn = sqlite3.connect('test_scraper_environment.sqlite')
conn.text_factory = str
curr = conn.cursor()

#Manipulate tables
with conn:
    # Disaggregate each type of contribution into a separate table
    curr.execute("CREATE TABLE eom AS SELECT date, dateString, tcc, tccIso3Alpha, tccIso3Num, mission, type, M AS eom_M, F AS eom_F, T AS eom_T FROM `swdata` WHERE type = 'Experts on mission'")
    curr.execute("CREATE TABLE troops AS SELECT date, dateString, tcc, tccIso3Alpha, tccIso3Num, mission, type, M AS troops_M, F AS troops_F, T AS troops_T FROM `swdata` WHERE type = 'Contingent Troop'")
    curr.execute("CREATE TABLE fpu AS SELECT date, dateString, tcc, tccIso3Alpha, tccIso3Num, mission, type, M AS fpu_M, F AS fpu_F, T AS fpu_T FROM `swdata` WHERE type = 'Formed Police Units'")
    curr.execute("CREATE TABLE ip AS SELECT date, dateString, tcc, tccIso3Alpha, tccIso3Num, mission, type, M AS ip_M, F AS ip_F, T AS ip_T FROM `swdata` WHERE type = 'Individual Police'")

    # Full join of eom and troop tables
    curr.execute("CREATE TABLE eom_troops AS SELECT eom.date, eom.dateString, eom.tcc, eom.tccIso3Alpha, eom.tccIso3Num, eom.mission, eom.eom_M, eom.eom_F, eom.eom_T, troops.troops_M, troops.troops_F, troops.troops_T FROM eom INNER JOIN troops ON eom.date = troops.date AND eom.tcc = troops.tcc AND eom.mission = troops.mission UNION ALL SELECT eom.date, eom.dateString, eom.tcc, eom.tccIso3Alpha, eom.tccIso3Num, eom.mission, eom.eom_M, eom.eom_F, eom.eom_T, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER) FROM eom WHERE NOT EXISTS (SELECT * FROM troops WHERE eom.date = troops.date AND eom.tcc = troops.tcc AND eom.mission = troops.mission) UNION ALL SELECT troops.date, troops.dateString, troops.tcc, troops.tccIso3Alpha, troops.tccIso3Num, troops.mission, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), troops.troops_M, troops.troops_F, troops.troops_T FROM troops WHERE NOT EXISTS (SELECT * FROM eom WHERE eom.date = troops.date AND eom.tcc = troops.tcc AND eom.mission = troops.mission)")

    # Full join of fpu and ip tables
    curr.execute("CREATE TABLE fpu_ip AS SELECT fpu.date, fpu.dateString, fpu.tcc, fpu.tccIso3Alpha, fpu.tccIso3Num, fpu.mission, fpu.fpu_M, fpu.fpu_F, fpu.fpu_T, ip.ip_M, ip.ip_F, ip.ip_T FROM fpu INNER JOIN ip ON fpu.date = ip.date AND fpu.tcc = ip.tcc AND fpu.mission = ip.mission UNION ALL SELECT fpu.date, fpu.dateString, fpu.tcc, fpu.tccIso3Alpha, fpu.tccIso3Num, fpu.mission, fpu.fpu_M, fpu.fpu_F, fpu.fpu_T, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER) FROM fpu WHERE NOT EXISTS (SELECT * FROM ip WHERE fpu.date = ip.date AND fpu.tcc = ip.tcc AND fpu.mission = ip.mission) UNION ALL SELECT ip.date, ip.dateString, ip.tcc, ip.tccIso3Alpha, ip.tccIso3Num, ip.mission, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), ip.ip_M, ip.ip_F, ip.ip_T FROM ip WHERE NOT EXISTS (SELECT * FROM fpu WHERE fpu.date = ip.date AND fpu.tcc = ip.tcc AND fpu.mission = ip.mission)")

    # Full join of joined tables
    curr.execute("CREATE TABLE eom_troops_fpu_ip AS SELECT eom_troops.date, eom_troops.dateString, eom_troops.tcc, eom_troops.tccIso3Alpha, eom_troops.tccIso3Num, eom_troops.mission, eom_troops.eom_M, eom_troops.eom_F, eom_troops.eom_T, eom_troops.troops_M, eom_troops.troops_F, eom_troops.troops_T, fpu_ip.fpu_M, fpu_ip.fpu_F, fpu_ip.fpu_T, fpu_ip.ip_M, fpu_ip.ip_F, fpu_ip.ip_T FROM eom_troops INNER JOIN fpu_ip ON eom_troops.date = fpu_ip.date AND eom_troops.tcc = fpu_ip.tcc AND eom_troops.mission = fpu_ip.mission UNION ALL  SELECT eom_troops.date, eom_troops.dateString, eom_troops.tcc, eom_troops.tccIso3Alpha, eom_troops.tccIso3Num, eom_troops.mission, eom_troops.eom_M, eom_troops.eom_F, eom_troops.eom_T, eom_troops.troops_M, eom_troops.troops_F, eom_troops.troops_T, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER) FROM eom_troops WHERE NOT EXISTS (SELECT * FROM fpu_ip WHERE eom_troops.date = fpu_ip.date AND eom_troops.tcc = fpu_ip.tcc AND eom_troops.mission = fpu_ip.mission) UNION ALL SELECT fpu_ip.date, fpu_ip.dateString, fpu_ip.tcc, fpu_ip.tccIso3Alpha, fpu_ip.tccIso3Num, fpu_ip.mission, CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), CAST(NULL AS INTEGER), fpu_ip.fpu_M, fpu_ip.fpu_F, fpu_ip.fpu_T, fpu_ip.ip_M, fpu_ip.ip_F, fpu_ip.ip_T FROM fpu_ip WHERE NOT EXISTS ( SELECT * FROM eom_troops WHERE eom_troops.date = fpu_ip.date AND eom_troops.tcc = fpu_ip.tcc AND eom_troops.mission = fpu_ip.mission)")

#Write out tables into csv file
data = curr.execute('SELECT * FROM eom_troops_fpu_ip')

with open('gender.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerow(['date', 'dateString','tcc','tccIso3Alpha','tccIso3Num','mission','eom_M','eom_F','eom_T','troops_M','troops_F','troops_T','fpu_M','fpu_F','fpu_T','ip_M','ip_F','ip_T'])
    writer.writerows(data)
f.close()